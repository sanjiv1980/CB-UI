{"ast":null,"code":"import * as React from 'react';\nimport { KeyFilter } from 'primereact/keyfilter';\nimport { Tooltip } from 'primereact/tooltip';\nimport { ObjectUtils, classNames, DomHandler } from 'primereact/utils';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nvar InputTextarea =\n/*#__PURE__*/\nReact.memo(\n/*#__PURE__*/\nReact.forwardRef(function (props, ref) {\n  var elementRef = React.useRef(ref);\n  var cachedScrollHeight = React.useRef(0);\n\n  var onFocus = function onFocus(event) {\n    if (props.autoResize) {\n      resize();\n    }\n\n    props.onFocus && props.onFocus(event);\n  };\n\n  var onBlur = function onBlur(event) {\n    if (props.autoResize) {\n      resize();\n    }\n\n    props.onBlur && props.onBlur(event);\n  };\n\n  var onKeyUp = function onKeyUp(event) {\n    if (props.autoResize) {\n      resize();\n    }\n\n    props.onKeyUp && props.onKeyUp(event);\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    props.onKeyDown && props.onKeyDown(event);\n\n    if (props.keyfilter) {\n      KeyFilter.onKeyPress(event, props.keyfilter, props.validateOnly);\n    }\n  };\n\n  var onPaste = function onPaste(event) {\n    props.onPaste && props.onPaste(event);\n\n    if (props.keyfilter) {\n      KeyFilter.onPaste(event, props.keyfilter, props.validateOnly);\n    }\n  };\n\n  var onInput = function onInput(event) {\n    if (props.autoResize) {\n      resize();\n    }\n\n    props.onInput && props.onInput(event);\n    var target = event.target;\n    ObjectUtils.isNotEmpty(target.value) ? DomHandler.addClass(target, 'p-filled') : DomHandler.removeClass(target, 'p-filled');\n  };\n\n  var resize = function resize(initial) {\n    var inputEl = elementRef.current;\n\n    if (inputEl && DomHandler.isVisible(inputEl)) {\n      if (!cachedScrollHeight.current) {\n        cachedScrollHeight.current = inputEl.scrollHeight;\n        inputEl.style.overflow = 'hidden';\n      }\n\n      if (cachedScrollHeight.current !== inputEl.scrollHeight || initial) {\n        inputEl.style.height = '';\n        inputEl.style.height = inputEl.scrollHeight + 'px';\n\n        if (parseFloat(inputEl.style.height) >= parseFloat(inputEl.style.maxHeight)) {\n          inputEl.style.overflowY = 'scroll';\n          inputEl.style.height = inputEl.style.maxHeight;\n        } else {\n          inputEl.style.overflow = 'hidden';\n        }\n\n        cachedScrollHeight.current = inputEl.scrollHeight;\n      }\n    }\n  };\n\n  var currentValue = elementRef.current && elementRef.current.value;\n  var isFilled = React.useMemo(function () {\n    return ObjectUtils.isNotEmpty(props.value) || ObjectUtils.isNotEmpty(props.defaultValue) || ObjectUtils.isNotEmpty(currentValue);\n  }, [props.value, props.defaultValue, currentValue]);\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(elementRef, ref);\n  }, [elementRef, ref]);\n  React.useEffect(function () {\n    if (props.autoResize) {\n      resize(true);\n    }\n  }, [props.autoResize]);\n  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip);\n  var otherProps = ObjectUtils.findDiffKeys(props, InputTextarea.defaultProps);\n  var className = classNames('p-inputtextarea p-inputtext p-component', {\n    'p-disabled': props.disabled,\n    'p-filled': isFilled,\n    'p-inputtextarea-resizable': props.autoResize\n  }, props.className);\n  return (\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null,\n    /*#__PURE__*/\n    React.createElement(\"textarea\", _extends({\n      ref: elementRef\n    }, otherProps, {\n      className: className,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onKeyUp: onKeyUp,\n      onKeyDown: onKeyDown,\n      onInput: onInput,\n      onPaste: onPaste\n    })), hasTooltip &&\n    /*#__PURE__*/\n    React.createElement(Tooltip, _extends({\n      target: elementRef,\n      content: props.tooltip\n    }, props.tooltipOptions)))\n  );\n}));\nInputTextarea.displayName = 'InputTextarea';\nInputTextarea.defaultProps = {\n  __TYPE: 'InputTextarea',\n  autoResize: false,\n  keyfilter: null,\n  onBlur: null,\n  onFocus: null,\n  onInput: null,\n  onKeyDown: null,\n  onKeyUp: null,\n  onPaste: null,\n  tooltip: null,\n  tooltipOptions: null,\n  validateOnly: false\n};\nexport { InputTextarea };","map":null,"metadata":{},"sourceType":"module"}