{"ast":null,"code":"import * as React from 'react';\nimport { Tooltip } from 'primereact/tooltip';\nimport { ObjectUtils, DomHandler, classNames } from 'primereact/utils';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (null != _i) {\n    var _s,\n        _e,\n        _x,\n        _r,\n        _arr = [],\n        _n = !0,\n        _d = !1;\n\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar RadioButtonBase = {\n  defaultProps: {\n    __TYPE: 'RadioButton',\n    id: null,\n    inputRef: null,\n    inputId: null,\n    name: null,\n    value: null,\n    checked: false,\n    style: null,\n    className: null,\n    disabled: false,\n    required: false,\n    tabIndex: null,\n    tooltip: null,\n    tooltipOptions: null,\n    onChange: null,\n    children: undefined\n  },\n  getProps: function getProps(props) {\n    return ObjectUtils.getMergedProps(props, RadioButtonBase.defaultProps);\n  },\n  getOtherProps: function getOtherProps(props) {\n    return ObjectUtils.getDiffProps(props, RadioButtonBase.defaultProps);\n  }\n};\nvar RadioButton =\n/*#__PURE__*/\nReact.memo(\n/*#__PURE__*/\nReact.forwardRef(function (inProps, ref) {\n  var props = RadioButtonBase.getProps(inProps);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedState = _React$useState2[0],\n      setFocusedState = _React$useState2[1];\n\n  var elementRef = React.useRef(null);\n  var inputRef = React.useRef(props.inputRef);\n\n  var select = function select(e) {\n    onClick(e);\n  };\n\n  var onClick = function onClick(e) {\n    if (!props.disabled && props.onChange) {\n      var checked = props.checked;\n      var radioClicked = e.target instanceof HTMLDivElement;\n      var inputClicked = e.target === inputRef.current;\n      var isInputToggled = inputClicked && e.target.checked !== checked;\n      var isRadioToggled = radioClicked && (DomHandler.hasClass(elementRef.current, 'p-radiobutton-checked') === checked ? !checked : false);\n\n      if (isInputToggled || isRadioToggled) {\n        var value = !checked;\n        props.onChange({\n          originalEvent: e,\n          value: props.value,\n          checked: value,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            type: 'radio',\n            name: props.name,\n            id: props.id,\n            value: props.value,\n            checked: value\n          }\n        });\n\n        if (isRadioToggled) {\n          inputRef.current.checked = value;\n        }\n      }\n\n      DomHandler.focus(inputRef.current);\n      e.preventDefault();\n    }\n  };\n\n  var onFocus = function onFocus() {\n    setFocusedState(true);\n  };\n\n  var onBlur = function onBlur() {\n    setFocusedState(false);\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    if (event.code === 'Space' || event.key === ' ') {\n      // event.key is for Android support\n      onClick(event);\n    }\n  };\n\n  React.useEffect(function () {\n    if (inputRef.current) {\n      inputRef.current.checked = props.checked;\n    }\n  }, [props.checked]);\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(inputRef, props.inputRef);\n  }, [inputRef, props.inputRef]);\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      select: select,\n      focus: function focus() {\n        return DomHandler.focus(inputRef.current);\n      },\n      getElement: function getElement() {\n        return elementRef.current;\n      },\n      getInput: function getInput() {\n        return inputRef.current;\n      }\n    };\n  });\n  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip);\n  var otherProps = RadioButtonBase.getOtherProps(props);\n  var ariaProps = ObjectUtils.reduceKeys(otherProps, DomHandler.ARIA_PROPS);\n  var className = classNames('p-radiobutton p-component', {\n    'p-radiobutton-checked': props.checked,\n    'p-radiobutton-disabled': props.disabled,\n    'p-radiobutton-focused': focusedState\n  }, props.className);\n  var boxClassName = classNames('p-radiobutton-box', {\n    'p-highlight': props.checked,\n    'p-disabled': props.disabled,\n    'p-focus': focusedState\n  });\n  return (\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null,\n    /*#__PURE__*/\n    React.createElement(\"div\", _extends({\n      ref: elementRef,\n      id: props.id,\n      className: className,\n      style: props.style\n    }, otherProps, {\n      onClick: onClick\n    }),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"p-hidden-accessible\"\n    },\n    /*#__PURE__*/\n    React.createElement(\"input\", _extends({\n      ref: inputRef,\n      id: props.inputId,\n      type: \"radio\",\n      name: props.name,\n      defaultChecked: props.checked,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onKeyDown: onKeyDown,\n      disabled: props.disabled,\n      required: props.required,\n      tabIndex: props.tabIndex\n    }, ariaProps))),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: boxClassName\n    },\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"p-radiobutton-icon\"\n    }))), hasTooltip &&\n    /*#__PURE__*/\n    React.createElement(Tooltip, _extends({\n      target: elementRef,\n      content: props.tooltip\n    }, props.tooltipOptions)))\n  );\n}));\nRadioButton.displayName = 'RadioButton';\nexport { RadioButton };","map":null,"metadata":{},"sourceType":"module"}