{"ast":null,"code":"import * as React from 'react';\nimport { useMountEffect, useUpdateEffect } from 'primereact/hooks';\nimport { InputText } from 'primereact/inputtext';\nimport { Ripple } from 'primereact/ripple';\nimport { Tooltip } from 'primereact/tooltip';\nimport { ObjectUtils, DomHandler, classNames } from 'primereact/utils';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (null != _i) {\n    var _s,\n        _e,\n        _x,\n        _r,\n        _arr = [],\n        _n = !0,\n        _d = !1;\n\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar InputNumberBase = {\n  defaultProps: {\n    __TYPE: 'InputNumber',\n    allowEmpty: true,\n    ariaLabelledBy: null,\n    autoFocus: false,\n    buttonLayout: 'stacked',\n    className: null,\n    currency: undefined,\n    currencyDisplay: undefined,\n    decrementButtonClassName: null,\n    decrementButtonIcon: 'pi pi-angle-down',\n    disabled: false,\n    format: true,\n    id: null,\n    incrementButtonClassName: null,\n    incrementButtonIcon: 'pi pi-angle-up',\n    inputClassName: null,\n    inputId: null,\n    inputMode: null,\n    inputRef: null,\n    inputStyle: null,\n    locale: undefined,\n    localeMatcher: undefined,\n    max: null,\n    maxFractionDigits: undefined,\n    maxLength: null,\n    min: null,\n    minFractionDigits: undefined,\n    mode: 'decimal',\n    name: null,\n    onBlur: null,\n    onChange: null,\n    onFocus: null,\n    onKeyDown: null,\n    onValueChange: null,\n    pattern: null,\n    placeholder: null,\n    prefix: null,\n    readOnly: false,\n    required: false,\n    showButtons: false,\n    size: null,\n    step: 1,\n    style: null,\n    suffix: null,\n    tabIndex: null,\n    tooltip: null,\n    tooltipOptions: null,\n    type: 'text',\n    useGrouping: true,\n    value: null,\n    children: undefined\n  },\n  getProps: function getProps(props) {\n    return ObjectUtils.getMergedProps(props, InputNumberBase.defaultProps);\n  },\n  getOtherProps: function getOtherProps(props) {\n    return ObjectUtils.getDiffProps(props, InputNumberBase.defaultProps);\n  }\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar InputNumber =\n/*#__PURE__*/\nReact.memo(\n/*#__PURE__*/\nReact.forwardRef(function (inProps, ref) {\n  var props = InputNumberBase.getProps(inProps);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedState = _React$useState2[0],\n      setFocusedState = _React$useState2[1];\n\n  var elementRef = React.useRef(null);\n  var inputRef = React.useRef(null);\n  var timer = React.useRef(null);\n  var lastValue = React.useRef(null);\n  var numberFormat = React.useRef(null);\n  var groupChar = React.useRef(null);\n  var prefixChar = React.useRef(null);\n  var suffixChar = React.useRef(null);\n  var isSpecialChar = React.useRef(null);\n\n  var _numeral = React.useRef(null);\n\n  var _group = React.useRef(null);\n\n  var _minusSign = React.useRef(null);\n\n  var _currency = React.useRef(null);\n\n  var _decimal = React.useRef(null);\n\n  var _suffix = React.useRef(null);\n\n  var _prefix = React.useRef(null);\n\n  var _index = React.useRef(null);\n\n  var stacked = props.showButtons && props.buttonLayout === 'stacked';\n  var horizontal = props.showButtons && props.buttonLayout === 'horizontal';\n  var vertical = props.showButtons && props.buttonLayout === 'vertical';\n  var inputMode = props.inputMode || (props.mode === 'decimal' && !props.minFractionDigits ? 'numeric' : 'decimal');\n\n  var getOptions = function getOptions() {\n    return {\n      localeMatcher: props.localeMatcher,\n      style: props.mode,\n      currency: props.currency,\n      currencyDisplay: props.currencyDisplay,\n      useGrouping: props.useGrouping,\n      minimumFractionDigits: props.minFractionDigits,\n      maximumFractionDigits: props.maxFractionDigits\n    };\n  };\n\n  var constructParser = function constructParser() {\n    numberFormat.current = new Intl.NumberFormat(props.locale, getOptions());\n\n    var numerals = _toConsumableArray(new Intl.NumberFormat(props.locale, {\n      useGrouping: false\n    }).format(9876543210)).reverse();\n\n    var index = new Map(numerals.map(function (d, i) {\n      return [d, i];\n    }));\n    _numeral.current = new RegExp(\"[\".concat(numerals.join(''), \"]\"), 'g');\n    _group.current = getGroupingExpression();\n    _minusSign.current = getMinusSignExpression();\n    _currency.current = getCurrencyExpression();\n    _decimal.current = getDecimalExpression();\n    _suffix.current = getSuffixExpression();\n    _prefix.current = getPrefixExpression();\n\n    _index.current = function (d) {\n      return index.get(d);\n    };\n  };\n\n  var escapeRegExp = function escapeRegExp(text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  };\n\n  var getDecimalExpression = function getDecimalExpression() {\n    var formatter = new Intl.NumberFormat(props.locale, _objectSpread(_objectSpread({}, getOptions()), {}, {\n      useGrouping: false\n    }));\n    return new RegExp(\"[\".concat(formatter.format(1.1).replace(_currency.current, '').trim().replace(_numeral.current, ''), \"]\"), 'g');\n  };\n\n  var getGroupingExpression = function getGroupingExpression() {\n    var formatter = new Intl.NumberFormat(props.locale, {\n      useGrouping: true\n    });\n    groupChar.current = formatter.format(1000000).trim().replace(_numeral.current, '').charAt(0);\n    return new RegExp(\"[\".concat(groupChar.current, \"]\"), 'g');\n  };\n\n  var getMinusSignExpression = function getMinusSignExpression() {\n    var formatter = new Intl.NumberFormat(props.locale, {\n      useGrouping: false\n    });\n    return new RegExp(\"[\".concat(formatter.format(-1).trim().replace(_numeral.current, ''), \"]\"), 'g');\n  };\n\n  var getCurrencyExpression = function getCurrencyExpression() {\n    if (props.currency) {\n      var formatter = new Intl.NumberFormat(props.locale, {\n        style: 'currency',\n        currency: props.currency,\n        currencyDisplay: props.currencyDisplay,\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      });\n      return new RegExp(\"[\".concat(formatter.format(1).replace(/\\s/g, '').replace(_numeral.current, '').replace(_group.current, ''), \"]\"), 'g');\n    }\n\n    return new RegExp(\"[]\", 'g');\n  };\n\n  var getPrefixExpression = function getPrefixExpression() {\n    if (props.prefix) {\n      prefixChar.current = props.prefix;\n    } else {\n      var formatter = new Intl.NumberFormat(props.locale, {\n        style: props.mode,\n        currency: props.currency,\n        currencyDisplay: props.currencyDisplay\n      });\n      prefixChar.current = formatter.format(1).split('1')[0];\n    }\n\n    return new RegExp(\"\".concat(escapeRegExp(prefixChar.current || '')), 'g');\n  };\n\n  var getSuffixExpression = function getSuffixExpression() {\n    if (props.suffix) {\n      suffixChar.current = props.suffix;\n    } else {\n      var formatter = new Intl.NumberFormat(props.locale, {\n        style: props.mode,\n        currency: props.currency,\n        currencyDisplay: props.currencyDisplay,\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      });\n      suffixChar.current = formatter.format(1).split('1')[1];\n    }\n\n    return new RegExp(\"\".concat(escapeRegExp(suffixChar.current || '')), 'g');\n  };\n\n  var formatValue = function formatValue(value) {\n    if (value != null) {\n      if (value === '-') {\n        // Minus sign\n        return value;\n      }\n\n      if (props.format) {\n        var formatter = new Intl.NumberFormat(props.locale, getOptions());\n\n        var _formattedValue = formatter.format(value);\n\n        if (props.prefix) {\n          _formattedValue = props.prefix + _formattedValue;\n        }\n\n        if (props.suffix) {\n          _formattedValue = _formattedValue + props.suffix;\n        }\n\n        return _formattedValue;\n      }\n\n      return value.toString();\n    }\n\n    return '';\n  };\n\n  var parseValue = function parseValue(text) {\n    var filteredText = text.replace(_suffix.current, '').replace(_prefix.current, '').trim().replace(/\\s/g, '').replace(_currency.current, '').replace(_group.current, '').replace(_minusSign.current, '-').replace(_decimal.current, '.').replace(_numeral.current, _index.current);\n\n    if (filteredText) {\n      if (filteredText === '-') // Minus sign\n        return filteredText;\n      var parsedValue = +filteredText;\n      return isNaN(parsedValue) ? null : parsedValue;\n    }\n\n    return null;\n  };\n\n  var repeat = function repeat(event, interval, dir) {\n    var i = interval || 500;\n    clearTimer();\n    timer.current = setTimeout(function () {\n      repeat(event, 40, dir);\n    }, i);\n    spin(event, dir);\n  };\n\n  var spin = function spin(event, dir) {\n    if (inputRef.current) {\n      var step = props.step * dir;\n      var currentValue = parseValue(inputRef.current.value) || 0;\n      var newValue = validateValue(currentValue + step);\n\n      if (props.maxLength && props.maxLength < formatValue(newValue).length) {\n        return;\n      } // #3913 onChange should be called before onValueChange\n\n\n      handleOnChange(event, currentValue, newValue); // touch devices trigger the keyboard to display because of setSelectionRange\n\n      !DomHandler.isTouchDevice() && updateInput(newValue, null, 'spin');\n      updateModel(event, newValue);\n    }\n  };\n\n  var onUpButtonMouseDown = function onUpButtonMouseDown(event) {\n    if (!props.disabled && !props.readOnly) {\n      props.autoFocus && DomHandler.focus(inputRef.current, props.autoFocus);\n      repeat(event, null, 1);\n      event.preventDefault();\n    }\n  };\n\n  var onUpButtonMouseUp = function onUpButtonMouseUp() {\n    if (!props.disabled && !props.readOnly) {\n      clearTimer();\n    }\n  };\n\n  var onUpButtonMouseLeave = function onUpButtonMouseLeave() {\n    if (!props.disabled && !props.readOnly) {\n      clearTimer();\n    }\n  };\n\n  var onUpButtonKeyUp = function onUpButtonKeyUp() {\n    if (!props.disabled && !props.readOnly) {\n      clearTimer();\n    }\n  };\n\n  var onUpButtonKeyDown = function onUpButtonKeyDown(event) {\n    if (!props.disabled && !props.readOnly && (event.keyCode === 32 || event.keyCode === 13)) {\n      repeat(event, null, 1);\n    }\n  };\n\n  var onDownButtonMouseDown = function onDownButtonMouseDown(event) {\n    if (!props.disabled && !props.readOnly) {\n      props.autoFocus && DomHandler.focus(inputRef.current, props.autoFocus);\n      repeat(event, null, -1);\n      event.preventDefault();\n    }\n  };\n\n  var onDownButtonMouseUp = function onDownButtonMouseUp() {\n    if (!props.disabled && !props.readOnly) {\n      clearTimer();\n    }\n  };\n\n  var onDownButtonMouseLeave = function onDownButtonMouseLeave() {\n    if (!props.disabled && !props.readOnly) {\n      clearTimer();\n    }\n  };\n\n  var onDownButtonKeyUp = function onDownButtonKeyUp() {\n    if (!props.disabled && !props.readOnly) {\n      clearTimer();\n    }\n  };\n\n  var onDownButtonKeyDown = function onDownButtonKeyDown(event) {\n    if (!props.disabled && !props.readOnly && (event.keyCode === 32 || event.keyCode === 13)) {\n      repeat(event, null, -1);\n    }\n  };\n\n  var onInput = function onInput(event) {\n    if (props.disabled || props.readOnly) {\n      return;\n    }\n\n    if (isSpecialChar.current) {\n      event.target.value = lastValue.current;\n    }\n\n    isSpecialChar.current = false;\n  };\n\n  var onInputKeyDown = function onInputKeyDown(event) {\n    if (props.disabled || props.readOnly) {\n      return;\n    }\n\n    lastValue.current = event.target.value;\n\n    if (event.shiftKey || event.altKey) {\n      isSpecialChar.current = true;\n      return;\n    }\n\n    var selectionStart = event.target.selectionStart;\n    var selectionEnd = event.target.selectionEnd;\n    var inputValue = event.target.value;\n    var newValueStr = null;\n\n    if (event.altKey) {\n      event.preventDefault();\n    }\n\n    switch (event.which) {\n      //up\n      case 38:\n        spin(event, 1);\n        event.preventDefault();\n        break;\n      //down\n\n      case 40:\n        spin(event, -1);\n        event.preventDefault();\n        break;\n      //left\n\n      case 37:\n        if (!isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n          event.preventDefault();\n        }\n\n        break;\n      //right\n\n      case 39:\n        if (!isNumeralChar(inputValue.charAt(selectionStart))) {\n          event.preventDefault();\n        }\n\n        break;\n      //enter and tab\n\n      case 13:\n      case 9:\n        newValueStr = validateValue(parseValue(inputValue));\n        inputRef.current.value = formatValue(newValueStr);\n        inputRef.current.setAttribute('aria-valuenow', newValueStr);\n        updateModel(event, newValueStr);\n        break;\n      //backspace\n\n      case 8:\n        event.preventDefault();\n\n        if (selectionStart === selectionEnd) {\n          var deleteChar = inputValue.charAt(selectionStart - 1);\n\n          var _getDecimalCharIndexe = getDecimalCharIndexes(inputValue),\n              decimalCharIndex = _getDecimalCharIndexe.decimalCharIndex,\n              decimalCharIndexWithoutPrefix = _getDecimalCharIndexe.decimalCharIndexWithoutPrefix;\n\n          if (isNumeralChar(deleteChar)) {\n            var decimalLength = getDecimalLength(inputValue);\n\n            if (_group.current.test(deleteChar)) {\n              _group.current.lastIndex = 0;\n              newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n            } else if (_decimal.current.test(deleteChar)) {\n              _decimal.current.lastIndex = 0;\n\n              if (decimalLength) {\n                inputRef.current.setSelectionRange(selectionStart - 1, selectionStart - 1);\n              } else {\n                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n              }\n            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n              var insertedText = isDecimalMode() && (props.minFractionDigits || 0) < decimalLength ? '' : '0';\n              newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n            } else if (decimalCharIndexWithoutPrefix === 1) {\n              newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n              newValueStr = parseValue(newValueStr) > 0 ? newValueStr : '';\n            } else {\n              newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n            }\n          }\n\n          updateValue(event, newValueStr, null, 'delete-single');\n        } else {\n          newValueStr = deleteRange(inputValue, selectionStart, selectionEnd);\n          updateValue(event, newValueStr, null, 'delete-range');\n        }\n\n        break;\n      // del\n\n      case 46:\n        event.preventDefault();\n\n        if (selectionStart === selectionEnd) {\n          var _deleteChar = inputValue.charAt(selectionStart);\n\n          var _getDecimalCharIndexe2 = getDecimalCharIndexes(inputValue),\n              _decimalCharIndex = _getDecimalCharIndexe2.decimalCharIndex,\n              _decimalCharIndexWithoutPrefix = _getDecimalCharIndexe2.decimalCharIndexWithoutPrefix;\n\n          if (isNumeralChar(_deleteChar)) {\n            var _decimalLength = getDecimalLength(inputValue);\n\n            if (_group.current.test(_deleteChar)) {\n              _group.current.lastIndex = 0;\n              newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n            } else if (_decimal.current.test(_deleteChar)) {\n              _decimal.current.lastIndex = 0;\n\n              if (_decimalLength) {\n                inputRef.current.setSelectionRange(selectionStart + 1, selectionStart + 1);\n              } else {\n                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n              }\n            } else if (_decimalCharIndex > 0 && selectionStart > _decimalCharIndex) {\n              var _insertedText = isDecimalMode() && (props.minFractionDigits || 0) < _decimalLength ? '' : '0';\n\n              newValueStr = inputValue.slice(0, selectionStart) + _insertedText + inputValue.slice(selectionStart + 1);\n            } else if (_decimalCharIndexWithoutPrefix === 1) {\n              newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n              newValueStr = parseValue(newValueStr) > 0 ? newValueStr : '';\n            } else {\n              newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n            }\n          }\n\n          updateValue(event, newValueStr, null, 'delete-back-single');\n        } else {\n          newValueStr = deleteRange(inputValue, selectionStart, selectionEnd);\n          updateValue(event, newValueStr, null, 'delete-range');\n        }\n\n        break;\n    }\n\n    if (props.onKeyDown) {\n      props.onKeyDown(event);\n    }\n  };\n\n  var onInputKeyPress = function onInputKeyPress(event) {\n    if (props.disabled || props.readOnly) {\n      return;\n    }\n\n    var code = event.which || event.keyCode;\n\n    if (code !== 13) {\n      // to submit a form\n      event.preventDefault();\n    }\n\n    var _char = String.fromCharCode(code);\n\n    var _isDecimalSign = isDecimalSign(_char);\n\n    var _isMinusSign = isMinusSign(_char);\n\n    if (48 <= code && code <= 57 || _isMinusSign || _isDecimalSign) {\n      insert(event, _char, {\n        isDecimalSign: _isDecimalSign,\n        isMinusSign: _isMinusSign\n      });\n    }\n  };\n\n  var onPaste = function onPaste(event) {\n    event.preventDefault();\n\n    if (props.disabled || props.readOnly) {\n      return;\n    }\n\n    var data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n    if (data) {\n      var filteredData = parseValue(data);\n\n      if (filteredData != null) {\n        insert(event, filteredData.toString());\n      }\n    }\n  };\n\n  var allowMinusSign = function allowMinusSign() {\n    return props.min === null || props.min < 0;\n  };\n\n  var isMinusSign = function isMinusSign(_char2) {\n    if (_minusSign.current.test(_char2) || _char2 === '-') {\n      _minusSign.current.lastIndex = 0;\n      return true;\n    }\n\n    return false;\n  };\n\n  var isDecimalSign = function isDecimalSign(_char3) {\n    if (_decimal.current.test(_char3)) {\n      _decimal.current.lastIndex = 0;\n      return true;\n    }\n\n    return false;\n  };\n\n  var isDecimalMode = function isDecimalMode() {\n    return props.mode === 'decimal';\n  };\n\n  var getDecimalCharIndexes = function getDecimalCharIndexes(val) {\n    var decimalCharIndex = val.search(_decimal.current);\n    _decimal.current.lastIndex = 0;\n    var filteredVal = val.replace(_prefix.current, '').trim().replace(/\\s/g, '').replace(_currency.current, '');\n    var decimalCharIndexWithoutPrefix = filteredVal.search(_decimal.current);\n    _decimal.current.lastIndex = 0;\n    return {\n      decimalCharIndex: decimalCharIndex,\n      decimalCharIndexWithoutPrefix: decimalCharIndexWithoutPrefix\n    };\n  };\n\n  var getCharIndexes = function getCharIndexes(val) {\n    var decimalCharIndex = val.search(_decimal.current);\n    _decimal.current.lastIndex = 0;\n    var minusCharIndex = val.search(_minusSign.current);\n    _minusSign.current.lastIndex = 0;\n    var suffixCharIndex = val.search(_suffix.current);\n    _suffix.current.lastIndex = 0;\n    var currencyCharIndex = val.search(_currency.current);\n    _currency.current.lastIndex = 0;\n    return {\n      decimalCharIndex: decimalCharIndex,\n      minusCharIndex: minusCharIndex,\n      suffixCharIndex: suffixCharIndex,\n      currencyCharIndex: currencyCharIndex\n    };\n  };\n\n  var insert = function insert(event, text) {\n    var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      isDecimalSign: false,\n      isMinusSign: false\n    };\n    var minusCharIndexOnText = text.search(_minusSign.current);\n    _minusSign.current.lastIndex = 0;\n\n    if (!allowMinusSign() && minusCharIndexOnText !== -1) {\n      return;\n    }\n\n    var selectionStart = inputRef.current.selectionStart;\n    var selectionEnd = inputRef.current.selectionEnd;\n    var inputValue = inputRef.current.value.trim();\n\n    var _getCharIndexes = getCharIndexes(inputValue),\n        decimalCharIndex = _getCharIndexes.decimalCharIndex,\n        minusCharIndex = _getCharIndexes.minusCharIndex,\n        suffixCharIndex = _getCharIndexes.suffixCharIndex,\n        currencyCharIndex = _getCharIndexes.currencyCharIndex;\n\n    var newValueStr;\n\n    if (sign.isMinusSign) {\n      if (selectionStart === 0) {\n        newValueStr = inputValue;\n\n        if (minusCharIndex === -1 || selectionEnd !== 0) {\n          newValueStr = insertText(inputValue, text, 0, selectionEnd);\n        }\n\n        updateValue(event, newValueStr, text, 'insert');\n      }\n    } else if (sign.isDecimalSign) {\n      if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n        updateValue(event, inputValue, text, 'insert');\n      } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n        newValueStr = insertText(inputValue, text, selectionStart, selectionEnd);\n        updateValue(event, newValueStr, text, 'insert');\n      } else if (decimalCharIndex === -1 && props.maxFractionDigits) {\n        newValueStr = insertText(inputValue, text, selectionStart, selectionEnd);\n        updateValue(event, newValueStr, text, 'insert');\n      }\n    } else {\n      var maxFractionDigits = numberFormat.current.resolvedOptions().maximumFractionDigits;\n      var operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n      if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n        if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n          var charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n          newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n          updateValue(event, newValueStr, text, operation);\n        }\n      } else {\n        newValueStr = insertText(inputValue, text, selectionStart, selectionEnd);\n        updateValue(event, newValueStr, text, operation);\n      }\n    }\n  };\n\n  var insertText = function insertText(value, text, start, end) {\n    var textSplit = text === '.' ? text : text.split('.');\n\n    if (textSplit.length === 2) {\n      var decimalCharIndex = value.slice(start, end).search(_decimal.current);\n      _decimal.current.lastIndex = 0;\n      return decimalCharIndex > 0 ? value.slice(0, start) + formatValue(text) + value.slice(end) : value || formatValue(text);\n    } else if (end - start === value.length) {\n      return formatValue(text);\n    } else if (start === 0) {\n      var suffix = ObjectUtils.isLetter(value[end]) ? end - 1 : end;\n      return text + value.slice(suffix);\n    } else if (end === value.length) {\n      return value.slice(0, start) + text;\n    } else {\n      return value.slice(0, start) + text + value.slice(end);\n    }\n  };\n\n  var deleteRange = function deleteRange(value, start, end) {\n    var newValueStr;\n    if (end - start === value.length) newValueStr = '';else if (start === 0) newValueStr = value.slice(end);else if (end === value.length) newValueStr = value.slice(0, start);else newValueStr = value.slice(0, start) + value.slice(end);\n    return newValueStr;\n  };\n\n  var initCursor = function initCursor() {\n    var selectionStart = inputRef.current.selectionStart;\n    var inputValue = inputRef.current.value;\n    var valueLength = inputValue.length;\n    var index = null; // remove prefix\n\n    var prefixLength = (prefixChar.current || '').length;\n    inputValue = inputValue.replace(_prefix.current, '');\n    selectionStart = selectionStart - prefixLength;\n\n    var _char4 = inputValue.charAt(selectionStart);\n\n    if (isNumeralChar(_char4)) {\n      return selectionStart + prefixLength;\n    } //left\n\n\n    var i = selectionStart - 1;\n\n    while (i >= 0) {\n      _char4 = inputValue.charAt(i);\n\n      if (isNumeralChar(_char4)) {\n        index = i + prefixLength;\n        break;\n      } else {\n        i--;\n      }\n    }\n\n    if (index !== null) {\n      inputRef.current.setSelectionRange(index + 1, index + 1);\n    } else {\n      i = selectionStart;\n\n      while (i < valueLength) {\n        _char4 = inputValue.charAt(i);\n\n        if (isNumeralChar(_char4)) {\n          index = i + prefixLength;\n          break;\n        } else {\n          i++;\n        }\n      }\n\n      if (index !== null) {\n        inputRef.current.setSelectionRange(index, index);\n      }\n    }\n\n    return index || 0;\n  };\n\n  var onInputClick = function onInputClick() {\n    initCursor();\n  };\n\n  var isNumeralChar = function isNumeralChar(_char5) {\n    if (_char5.length === 1 && (_numeral.current.test(_char5) || _decimal.current.test(_char5) || _group.current.test(_char5) || _minusSign.current.test(_char5))) {\n      resetRegex();\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  var resetRegex = function resetRegex() {\n    _numeral.current.lastIndex = 0;\n    _decimal.current.lastIndex = 0;\n    _group.current.lastIndex = 0;\n    _minusSign.current.lastIndex = 0;\n  };\n\n  var updateValue = function updateValue(event, valueStr, insertedValueStr, operation) {\n    var currentValue = inputRef.current.value;\n    var newValue = null;\n\n    if (valueStr != null) {\n      newValue = evaluateEmpty(parseValue(valueStr));\n      updateInput(newValue, insertedValueStr, operation, valueStr);\n      handleOnChange(event, currentValue, newValue);\n    }\n  };\n\n  var evaluateEmpty = function evaluateEmpty(newValue) {\n    return !newValue && !props.allowEmpty ? props.min || 0 : newValue;\n  };\n\n  var handleOnChange = function handleOnChange(event, currentValue, newValue) {\n    if (props.onChange && isValueChanged(currentValue, newValue)) {\n      props.onChange({\n        originalEvent: event,\n        value: newValue\n      });\n    }\n  };\n\n  var isValueChanged = function isValueChanged(currentValue, newValue) {\n    if (newValue === null && currentValue !== null) {\n      return true;\n    }\n\n    if (newValue != null) {\n      var parsedCurrentValue = typeof currentValue === 'string' ? parseValue(currentValue) : currentValue;\n      return newValue !== parsedCurrentValue;\n    }\n\n    return false;\n  };\n\n  var validateValue = function validateValue(value) {\n    if (value === '-') {\n      return null;\n    }\n\n    return validateValueByLimit(value);\n  };\n\n  var validateValueByLimit = function validateValueByLimit(value) {\n    if (ObjectUtils.isEmpty(value)) {\n      return null;\n    }\n\n    if (props.min !== null && value < props.min) {\n      return props.min;\n    }\n\n    if (props.max !== null && value > props.max) {\n      return props.max;\n    }\n\n    return value;\n  };\n\n  var updateInput = function updateInput(value, insertedValueStr, operation, valueStr) {\n    insertedValueStr = insertedValueStr || '';\n    var inputEl = inputRef.current;\n    var inputValue = inputEl.value;\n    var newValue = formatValue(value);\n    var currentLength = inputValue.length;\n\n    if (newValue !== valueStr) {\n      newValue = concatValues(newValue, valueStr);\n    }\n\n    if (currentLength === 0) {\n      inputEl.value = newValue;\n      inputEl.setSelectionRange(0, 0);\n      var index = initCursor();\n      var selectionEnd = index + insertedValueStr.length;\n      inputEl.setSelectionRange(selectionEnd, selectionEnd);\n    } else {\n      var selectionStart = inputEl.selectionStart;\n      var _selectionEnd = inputEl.selectionEnd;\n\n      if (props.maxLength && props.maxLength < newValue.length) {\n        return;\n      }\n\n      inputEl.value = newValue;\n      var newLength = newValue.length;\n\n      if (operation === 'range-insert') {\n        var startValue = parseValue((inputValue || '').slice(0, selectionStart));\n        var startValueStr = startValue !== null ? startValue.toString() : '';\n        var startExpr = startValueStr.split('').join(\"(\".concat(groupChar.current, \")?\"));\n        var sRegex = new RegExp(startExpr, 'g');\n        sRegex.test(newValue);\n        var tExpr = insertedValueStr.split('').join(\"(\".concat(groupChar.current, \")?\"));\n        var tRegex = new RegExp(tExpr, 'g');\n        tRegex.test(newValue.slice(sRegex.lastIndex));\n        _selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n        inputEl.setSelectionRange(_selectionEnd, _selectionEnd);\n      } else if (newLength === currentLength) {\n        if (operation === 'insert' || operation === 'delete-back-single') inputEl.setSelectionRange(_selectionEnd + 1, _selectionEnd + 1);else if (operation === 'delete-single') inputEl.setSelectionRange(_selectionEnd - 1, _selectionEnd - 1);else if (operation === 'delete-range' || operation === 'spin') inputEl.setSelectionRange(_selectionEnd, _selectionEnd);\n      } else if (operation === 'delete-back-single') {\n        var prevChar = inputValue.charAt(_selectionEnd - 1);\n        var nextChar = inputValue.charAt(_selectionEnd);\n        var diff = currentLength - newLength;\n\n        var isGroupChar = _group.current.test(nextChar);\n\n        if (isGroupChar && diff === 1) {\n          _selectionEnd += 1;\n        } else if (!isGroupChar && isNumeralChar(prevChar)) {\n          _selectionEnd += -1 * diff + 1;\n        }\n\n        _group.current.lastIndex = 0;\n        inputEl.setSelectionRange(_selectionEnd, _selectionEnd);\n      } else if (inputValue === '-' && operation === 'insert') {\n        inputEl.setSelectionRange(0, 0);\n\n        var _index2 = initCursor();\n\n        var _selectionEnd2 = _index2 + insertedValueStr.length + 1;\n\n        inputEl.setSelectionRange(_selectionEnd2, _selectionEnd2);\n      } else {\n        _selectionEnd = _selectionEnd + (newLength - currentLength);\n        inputEl.setSelectionRange(_selectionEnd, _selectionEnd);\n      }\n    }\n\n    inputEl.setAttribute('aria-valuenow', value);\n  };\n\n  var updateInputValue = function updateInputValue(newValue) {\n    newValue = evaluateEmpty(newValue);\n    var inputEl = inputRef.current;\n    var value = inputEl.value;\n\n    var _formattedValue = formattedValue(newValue);\n\n    if (value !== _formattedValue) {\n      inputEl.value = _formattedValue;\n      inputEl.setAttribute('aria-valuenow', newValue);\n    }\n  };\n\n  var formattedValue = function formattedValue(val) {\n    return formatValue(evaluateEmpty(val));\n  };\n\n  var concatValues = function concatValues(val1, val2) {\n    if (val1 && val2) {\n      var decimalCharIndex = val2.search(_decimal.current);\n      _decimal.current.lastIndex = 0;\n      return decimalCharIndex !== -1 ? val1.split(_decimal.current)[0] + val2.slice(decimalCharIndex) : val1;\n    }\n\n    return val1;\n  };\n\n  var getDecimalLength = function getDecimalLength(value) {\n    if (value) {\n      var valueSplit = value.split(_decimal.current);\n\n      if (valueSplit.length === 2) {\n        return valueSplit[1].replace(_suffix.current, '').trim().replace(/\\s/g, '').replace(_currency.current, '').length;\n      }\n    }\n\n    return 0;\n  };\n\n  var updateModel = function updateModel(event, value) {\n    if (props.onValueChange) {\n      props.onValueChange({\n        originalEvent: event,\n        value: value,\n        stopPropagation: function stopPropagation() {},\n        preventDefault: function preventDefault() {},\n        target: {\n          name: props.name,\n          id: props.id,\n          value: value\n        }\n      });\n    }\n  };\n\n  var onInputFocus = function onInputFocus(event) {\n    setFocusedState(true);\n    props.onFocus && props.onFocus(event);\n\n    if ((props.suffix || props.currency || props.prefix) && inputRef.current) {\n      // GitHub #1866 Cursor must be placed before/after symbol or arrow keys don't work\n      var selectionEnd = initCursor();\n      inputRef.current.setSelectionRange(selectionEnd, selectionEnd);\n    }\n  };\n\n  var onInputBlur = function onInputBlur(event) {\n    setFocusedState(false);\n\n    if (inputRef.current) {\n      var currentValue = inputRef.current.value;\n\n      if (isValueChanged(currentValue, props.value)) {\n        var newValue = validateValue(parseValue(currentValue));\n        updateInputValue(newValue);\n        updateModel(event, newValue);\n      }\n    }\n\n    props.onBlur && props.onBlur(event);\n  };\n\n  var clearTimer = function clearTimer() {\n    if (timer.current) {\n      clearInterval(timer.current);\n    }\n  };\n\n  var changeValue = function changeValue() {\n    updateInputValue(validateValueByLimit(props.value));\n    var newValue = validateValue(props.value);\n\n    if (props.value !== null && props.value !== newValue) {\n      updateModel(null, newValue);\n    }\n  };\n\n  var getFormatter = function getFormatter() {\n    return numberFormat.current;\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      focus: function focus() {\n        return DomHandler.focus(inputRef.current);\n      },\n      getFormatter: getFormatter,\n      getElement: function getElement() {\n        return elementRef.current;\n      },\n      getInput: function getInput() {\n        return inputRef.current;\n      }\n    };\n  });\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(inputRef, props.inputRef);\n  }, [inputRef, props.inputRef]);\n  useMountEffect(function () {\n    constructParser();\n    var newValue = validateValue(props.value);\n\n    if (props.value !== null && props.value !== newValue) {\n      updateModel(null, newValue);\n    }\n  });\n  useUpdateEffect(function () {\n    constructParser();\n    changeValue();\n  }, [props.locale, props.localeMatcher, props.mode, props.currency, props.currencyDisplay, props.useGrouping, props.minFractionDigits, props.maxFractionDigits, props.suffix, props.prefix]);\n  useUpdateEffect(function () {\n    changeValue();\n  }, [props.value]);\n\n  var createInputElement = function createInputElement() {\n    var className = classNames('p-inputnumber-input', props.inputClassName);\n    var valueToRender = formattedValue(props.value);\n    return (\n      /*#__PURE__*/\n      React.createElement(InputText, _extends({\n        ref: inputRef,\n        id: props.inputId,\n        style: props.inputStyle,\n        role: \"spinbutton\",\n        className: className,\n        defaultValue: valueToRender,\n        type: props.type,\n        size: props.size,\n        tabIndex: props.tabIndex,\n        inputMode: inputMode,\n        maxLength: props.maxLength,\n        disabled: props.disabled,\n        required: props.required,\n        pattern: props.pattern,\n        placeholder: props.placeholder,\n        readOnly: props.readOnly,\n        name: props.name,\n        autoFocus: props.autoFocus,\n        onKeyDown: onInputKeyDown,\n        onKeyPress: onInputKeyPress,\n        onInput: onInput,\n        onClick: onInputClick,\n        onBlur: onInputBlur,\n        onFocus: onInputFocus,\n        onPaste: onPaste,\n        min: props.min,\n        max: props.max,\n        \"aria-valuemin\": props.min,\n        \"aria-valuemax\": props.max,\n        \"aria-valuenow\": props.value\n      }, ariaProps, dataProps))\n    );\n  };\n\n  var createUpButton = function createUpButton() {\n    var className = classNames('p-inputnumber-button p-inputnumber-button-up p-button p-button-icon-only p-component', {\n      'p-disabled': props.disabled\n    }, props.incrementButtonClassName);\n    var icon = classNames('p-button-icon', props.incrementButtonIcon);\n    return (\n      /*#__PURE__*/\n      React.createElement(\"button\", {\n        type: \"button\",\n        className: className,\n        onPointerLeave: onUpButtonMouseLeave,\n        onPointerDown: onUpButtonMouseDown,\n        onPointerUp: onUpButtonMouseUp,\n        onKeyDown: onUpButtonKeyDown,\n        onKeyUp: onUpButtonKeyUp,\n        disabled: props.disabled,\n        tabIndex: -1\n      },\n      /*#__PURE__*/\n      React.createElement(\"span\", {\n        className: icon\n      }),\n      /*#__PURE__*/\n      React.createElement(Ripple, null))\n    );\n  };\n\n  var createDownButton = function createDownButton() {\n    var className = classNames('p-inputnumber-button p-inputnumber-button-down p-button p-button-icon-only p-component', {\n      'p-disabled': props.disabled\n    }, props.decrementButtonClassName);\n    var icon = classNames('p-button-icon', props.decrementButtonIcon);\n    return (\n      /*#__PURE__*/\n      React.createElement(\"button\", {\n        type: \"button\",\n        className: className,\n        onPointerLeave: onDownButtonMouseLeave,\n        onPointerDown: onDownButtonMouseDown,\n        onPointerUp: onDownButtonMouseUp,\n        onKeyDown: onDownButtonKeyDown,\n        onKeyUp: onDownButtonKeyUp,\n        disabled: props.disabled,\n        tabIndex: -1\n      },\n      /*#__PURE__*/\n      React.createElement(\"span\", {\n        className: icon\n      }),\n      /*#__PURE__*/\n      React.createElement(Ripple, null))\n    );\n  };\n\n  var createButtonGroup = function createButtonGroup() {\n    var upButton = props.showButtons && createUpButton();\n    var downButton = props.showButtons && createDownButton();\n\n    if (stacked) {\n      return (\n        /*#__PURE__*/\n        React.createElement(\"span\", {\n          className: \"p-inputnumber-button-group\"\n        }, upButton, downButton)\n      );\n    }\n\n    return (\n      /*#__PURE__*/\n      React.createElement(React.Fragment, null, upButton, downButton)\n    );\n  };\n\n  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip);\n  var otherProps = InputNumberBase.getOtherProps(props);\n  var dataProps = ObjectUtils.reduceKeys(otherProps, DomHandler.DATA_PROPS);\n  var ariaProps = ObjectUtils.reduceKeys(otherProps, DomHandler.ARIA_PROPS);\n  var className = classNames('p-inputnumber p-component p-inputwrapper', {\n    'p-inputwrapper-filled': props.value != null && props.value.toString().length > 0,\n    'p-inputwrapper-focus': focusedState,\n    'p-inputnumber-buttons-stacked': stacked,\n    'p-inputnumber-buttons-horizontal': horizontal,\n    'p-inputnumber-buttons-vertical': vertical\n  }, props.className);\n  var inputElement = createInputElement();\n  var buttonGroup = createButtonGroup();\n  return (\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null,\n    /*#__PURE__*/\n    React.createElement(\"span\", _extends({\n      ref: elementRef,\n      id: props.id,\n      className: className,\n      style: props.style\n    }, otherProps), inputElement, buttonGroup), hasTooltip &&\n    /*#__PURE__*/\n    React.createElement(Tooltip, _extends({\n      target: elementRef,\n      content: props.tooltip\n    }, props.tooltipOptions)))\n  );\n}));\nInputNumber.displayName = 'InputNumber';\nexport { InputNumber };","map":null,"metadata":{},"sourceType":"module"}