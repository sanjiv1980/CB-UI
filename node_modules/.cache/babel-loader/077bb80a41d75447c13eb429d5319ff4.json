{"ast":null,"code":"import * as React from 'react';\nimport PrimeReact, { localeOption, FilterService } from 'primereact/api';\nimport { useOverlayListener, useMountEffect, useUpdateEffect, useUnmountEffect } from 'primereact/hooks';\nimport { OverlayService } from 'primereact/overlayservice';\nimport { Tooltip } from 'primereact/tooltip';\nimport { classNames, ObjectUtils, DomHandler, ZIndexUtils, IconUtils } from 'primereact/utils';\nimport { CSSTransition } from 'primereact/csstransition';\nimport { Portal } from 'primereact/portal';\nimport { VirtualScroller } from 'primereact/virtualscroller';\nimport { Ripple } from 'primereact/ripple';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (null != _i) {\n    var _s,\n        _e,\n        _x,\n        _r,\n        _arr = [],\n        _n = !0,\n        _d = !1;\n\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {\n        ;\n      }\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n}\n\nfunction _arrayLikeToArray$1(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray$1(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();\n}\n\nvar DropdownItem =\n/*#__PURE__*/\nReact.memo(function (props) {\n  var onClick = function onClick(event) {\n    if (props.onClick) {\n      props.onClick({\n        originalEvent: event,\n        option: props.option\n      });\n    }\n  };\n\n  var className = classNames('p-dropdown-item', {\n    'p-highlight': props.selected,\n    'p-disabled': props.disabled,\n    'p-dropdown-item-empty': !props.label || props.label.length === 0\n  }, props.option && props.option.className);\n  var content = props.template ? ObjectUtils.getJSXElement(props.template, props.option) : props.label;\n  return (\n    /*#__PURE__*/\n    React.createElement(\"li\", {\n      className: className,\n      style: props.style,\n      onClick: onClick,\n      \"aria-label\": props.label,\n      key: props.label,\n      role: \"option\",\n      \"aria-selected\": props.selected\n    }, content,\n    /*#__PURE__*/\n    React.createElement(Ripple, null))\n  );\n});\nDropdownItem.displayName = 'DropdownItem';\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar DropdownPanel =\n/*#__PURE__*/\nReact.memo(\n/*#__PURE__*/\nReact.forwardRef(function (props, ref) {\n  var virtualScrollerRef = React.useRef(null);\n  var filterInputRef = React.useRef(null);\n  var isEmptyFilter = !(props.visibleOptions && props.visibleOptions.length) && props.hasFilter;\n  var filterOptions = {\n    filter: function filter(e) {\n      return onFilterInputChange(e);\n    },\n    reset: function reset() {\n      return props.resetFilter();\n    }\n  };\n\n  var onEnter = function onEnter() {\n    props.onEnter(function () {\n      if (virtualScrollerRef.current) {\n        var selectedIndex = props.getSelectedOptionIndex();\n\n        if (selectedIndex !== -1) {\n          setTimeout(function () {\n            return virtualScrollerRef.current.scrollToIndex(selectedIndex);\n          }, 0);\n        }\n      }\n    });\n  };\n\n  var onEntered = function onEntered() {\n    props.onEntered(function () {\n      if (props.filter && props.filterInputAutoFocus) {\n        DomHandler.focus(filterInputRef.current, false);\n      }\n    });\n  };\n\n  var onFilterInputChange = function onFilterInputChange(event) {\n    virtualScrollerRef.current && virtualScrollerRef.current.scrollToIndex(0);\n    props.onFilterInputChange && props.onFilterInputChange(event);\n  };\n\n  var createGroupChildren = function createGroupChildren(optionGroup, style) {\n    var groupChildren = props.getOptionGroupChildren(optionGroup);\n    return groupChildren.map(function (option, j) {\n      var optionLabel = props.getOptionLabel(option);\n      var optionKey = j + '_' + props.getOptionRenderKey(option);\n      var disabled = props.isOptionDisabled(option);\n      return (\n        /*#__PURE__*/\n        React.createElement(DropdownItem, {\n          key: optionKey,\n          label: optionLabel,\n          option: option,\n          style: style,\n          template: props.itemTemplate,\n          selected: props.isSelected(option),\n          disabled: disabled,\n          onClick: props.onOptionClick\n        })\n      );\n    });\n  };\n\n  var createEmptyMessage = function createEmptyMessage(emptyMessage, isFilter) {\n    var message = ObjectUtils.getJSXElement(emptyMessage, props) || localeOption(isFilter ? 'emptyFilterMessage' : 'emptyMessage');\n    return (\n      /*#__PURE__*/\n      React.createElement(\"li\", {\n        className: \"p-dropdown-empty-message\"\n      }, message)\n    );\n  };\n\n  var createItem = function createItem(option, index) {\n    var scrollerOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var style = {\n      height: scrollerOptions.props ? scrollerOptions.props.itemSize : undefined\n    };\n\n    if (props.optionGroupLabel) {\n      var groupContent = props.optionGroupTemplate ? ObjectUtils.getJSXElement(props.optionGroupTemplate, option, index) : props.getOptionGroupLabel(option);\n      var groupChildrenContent = createGroupChildren(option, style);\n      var key = index + '_' + props.getOptionGroupRenderKey(option);\n      return (\n        /*#__PURE__*/\n        React.createElement(React.Fragment, {\n          key: key\n        },\n        /*#__PURE__*/\n        React.createElement(\"li\", {\n          className: \"p-dropdown-item-group\",\n          style: style\n        }, groupContent), groupChildrenContent)\n      );\n    } else {\n      var optionLabel = props.getOptionLabel(option);\n      var optionKey = index + '_' + props.getOptionRenderKey(option);\n      var disabled = props.isOptionDisabled(option);\n      return (\n        /*#__PURE__*/\n        React.createElement(DropdownItem, {\n          key: optionKey,\n          label: optionLabel,\n          option: option,\n          style: style,\n          template: props.itemTemplate,\n          selected: props.isSelected(option),\n          disabled: disabled,\n          onClick: props.onOptionClick\n        })\n      );\n    }\n  };\n\n  var createItems = function createItems() {\n    if (ObjectUtils.isNotEmpty(props.visibleOptions)) {\n      return props.visibleOptions.map(createItem);\n    } else if (props.hasFilter) {\n      return createEmptyMessage(props.emptyFilterMessage, true);\n    }\n\n    return createEmptyMessage(props.emptyMessage);\n  };\n\n  var createFilterClearIcon = function createFilterClearIcon() {\n    if (props.showFilterClear && props.filterValue) {\n      var ariaLabel = localeOption('clear');\n      return (\n        /*#__PURE__*/\n        React.createElement(\"i\", {\n          className: \"p-dropdown-filter-clear-icon pi pi-times\",\n          \"aria-label\": ariaLabel,\n          onClick: function onClick() {\n            return props.onFilterClearIconClick(function () {\n              return DomHandler.focus(filterInputRef.current);\n            });\n          }\n        })\n      );\n    }\n\n    return null;\n  };\n\n  var createFilter = function createFilter() {\n    if (props.filter) {\n      var clearIcon = createFilterClearIcon();\n      var containerClassName = classNames('p-dropdown-filter-container', {\n        'p-dropdown-clearable-filter': !!clearIcon\n      });\n      var content =\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        className: containerClassName\n      },\n      /*#__PURE__*/\n      React.createElement(\"input\", {\n        ref: filterInputRef,\n        type: \"text\",\n        autoComplete: \"off\",\n        className: \"p-dropdown-filter p-inputtext p-component\",\n        placeholder: props.filterPlaceholder,\n        onKeyDown: props.onFilterInputKeyDown,\n        onChange: onFilterInputChange,\n        value: props.filterValue\n      }), clearIcon,\n      /*#__PURE__*/\n      React.createElement(\"i\", {\n        className: \"p-dropdown-filter-icon pi pi-search\"\n      }));\n\n      if (props.filterTemplate) {\n        var defaultContentOptions = {\n          className: containerClassName,\n          element: content,\n          filterOptions: filterOptions,\n          filterInputKeyDown: props.onFilterInputKeyDown,\n          filterInputChange: onFilterInputChange,\n          filterIconClassName: 'p-dropdown-filter-icon pi pi-search',\n          clearIcon: clearIcon,\n          props: props\n        };\n        content = ObjectUtils.getJSXElement(props.filterTemplate, defaultContentOptions);\n      }\n\n      return (\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          className: \"p-dropdown-header\"\n        }, content)\n      );\n    }\n\n    return null;\n  };\n\n  var createContent = function createContent() {\n    if (props.virtualScrollerOptions) {\n      var virtualScrollerProps = _objectSpread$1(_objectSpread$1({}, props.virtualScrollerOptions), {\n        style: _objectSpread$1(_objectSpread$1({}, props.virtualScrollerOptions.style), {\n          height: props.scrollHeight\n        }),\n        className: classNames('p-dropdown-items-wrapper', props.virtualScrollerOptions.className),\n        items: props.visibleOptions,\n        autoSize: true,\n        onLazyLoad: function onLazyLoad(event) {\n          return props.virtualScrollerOptions.onLazyLoad(_objectSpread$1(_objectSpread$1({}, event), {\n            filter: props.filterValue\n          }));\n        },\n        itemTemplate: function itemTemplate(item, options) {\n          return item && createItem(item, options.index, options);\n        },\n        contentTemplate: function contentTemplate(options) {\n          var className = classNames('p-dropdown-items', options.className);\n          var content = isEmptyFilter ? createEmptyMessage() : options.children;\n          return (\n            /*#__PURE__*/\n            React.createElement(\"ul\", {\n              ref: options.contentRef,\n              className: className,\n              role: \"listbox\"\n            }, content)\n          );\n        }\n      });\n\n      return (\n        /*#__PURE__*/\n        React.createElement(VirtualScroller, _extends({\n          ref: virtualScrollerRef\n        }, virtualScrollerProps))\n      );\n    } else {\n      var items = createItems();\n      return (\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          className: \"p-dropdown-items-wrapper\",\n          style: {\n            maxHeight: props.scrollHeight || 'auto'\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(\"ul\", {\n          className: \"p-dropdown-items\",\n          role: \"listbox\"\n        }, items))\n      );\n    }\n  };\n\n  var createElement = function createElement() {\n    var className = classNames('p-dropdown-panel p-component', props.panelClassName, {\n      'p-input-filled': PrimeReact.inputStyle === 'filled',\n      'p-ripple-disabled': PrimeReact.ripple === false\n    });\n    var filter = createFilter();\n    var content = createContent();\n    return (\n      /*#__PURE__*/\n      React.createElement(CSSTransition, {\n        nodeRef: ref,\n        classNames: \"p-connected-overlay\",\n        \"in\": props[\"in\"],\n        timeout: {\n          enter: 120,\n          exit: 100\n        },\n        options: props.transitionOptions,\n        unmountOnExit: true,\n        onEnter: onEnter,\n        onEntering: props.onEntering,\n        onEntered: onEntered,\n        onExit: props.onExit,\n        onExited: props.onExited\n      },\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        ref: ref,\n        className: className,\n        style: props.panelStyle,\n        onClick: props.onClick\n      }, filter, content))\n    );\n  };\n\n  var element = createElement();\n  return (\n    /*#__PURE__*/\n    React.createElement(Portal, {\n      element: element,\n      appendTo: props.appendTo\n    })\n  );\n}));\nDropdownPanel.displayName = 'DropdownPanel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar Dropdown =\n/*#__PURE__*/\nReact.memo(\n/*#__PURE__*/\nReact.forwardRef(function (props, ref) {\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      filterState = _React$useState2[0],\n      setFilterState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      focusedState = _React$useState4[0],\n      setFocusedState = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      overlayVisibleState = _React$useState6[0],\n      setOverlayVisibleState = _React$useState6[1];\n\n  var elementRef = React.useRef(null);\n  var overlayRef = React.useRef(null);\n  var inputRef = React.useRef(props.inputRef);\n  var focusInputRef = React.useRef(props.focusInputRef);\n  var searchTimeout = React.useRef(null);\n  var searchValue = React.useRef(null);\n  var currentSearchChar = React.useRef(null);\n  var isLazy = props.virtualScrollerOptions && props.virtualScrollerOptions.lazy;\n  var hasFilter = ObjectUtils.isNotEmpty(filterState);\n  var appendTo = props.appendTo || PrimeReact.appendTo;\n\n  var _useOverlayListener = useOverlayListener({\n    target: elementRef,\n    overlay: overlayRef,\n    listener: function listener(event, _ref) {\n      var type = _ref.type,\n          valid = _ref.valid;\n\n      if (valid) {\n        type === 'outside' ? !isClearClicked(event) && hide() : hide();\n      }\n    },\n    when: overlayVisibleState\n  }),\n      _useOverlayListener2 = _slicedToArray(_useOverlayListener, 2),\n      bindOverlayListener = _useOverlayListener2[0],\n      unbindOverlayListener = _useOverlayListener2[1];\n\n  var getVisibleOptions = function getVisibleOptions() {\n    if (hasFilter && !isLazy) {\n      var filterValue = filterState.trim().toLocaleLowerCase(props.filterLocale);\n      var searchFields = props.filterBy ? props.filterBy.split(',') : [props.optionLabel || 'label'];\n\n      if (props.optionGroupLabel) {\n        var filteredGroups = [];\n\n        var _iterator = _createForOfIteratorHelper(props.options),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var optgroup = _step.value;\n            var filteredSubOptions = FilterService.filter(getOptionGroupChildren(optgroup), searchFields, filterValue, props.filterMatchMode, props.filterLocale);\n\n            if (filteredSubOptions && filteredSubOptions.length) {\n              filteredGroups.push(_objectSpread(_objectSpread({}, optgroup), {\n                items: filteredSubOptions\n              }));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return filteredGroups;\n      } else {\n        return FilterService.filter(props.options, searchFields, filterValue, props.filterMatchMode, props.filterLocale);\n      }\n    } else {\n      return props.options;\n    }\n  };\n\n  var isClearClicked = function isClearClicked(event) {\n    return DomHandler.hasClass(event.target, 'p-dropdown-clear-icon') || DomHandler.hasClass(event.target, 'p-dropdown-filter-clear-icon');\n  };\n\n  var onClick = function onClick(event) {\n    if (props.disabled) {\n      return;\n    }\n\n    props.onClick && props.onClick(event); // do not continue if the user defined click wants to prevent it\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (DomHandler.hasClass(event.target, 'p-dropdown-clear-icon') || event.target.tagName === 'INPUT') {\n      return;\n    } else if (!overlayRef.current || !(overlayRef.current && overlayRef.current.contains(event.target))) {\n      DomHandler.focus(focusInputRef.current);\n      overlayVisibleState ? hide() : show();\n    }\n  };\n\n  var onInputFocus = function onInputFocus(event) {\n    if (props.showOnFocus && !overlayVisibleState) {\n      show();\n    }\n\n    setFocusedState(true);\n    props.onFocus && props.onFocus(event);\n  };\n\n  var onInputBlur = function onInputBlur(event) {\n    setFocusedState(false);\n\n    if (props.onBlur) {\n      setTimeout(function () {\n        var currentValue = inputRef.current ? inputRef.current.value : undefined;\n        props.onBlur({\n          originalEvent: event.originalEvent,\n          value: currentValue,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            name: props.name,\n            id: props.id,\n            value: currentValue\n          }\n        });\n      }, 200);\n    }\n  };\n\n  var onPanelClick = function onPanelClick(event) {\n    OverlayService.emit('overlay-click', {\n      originalEvent: event,\n      target: elementRef.current\n    });\n  };\n\n  var onInputKeyDown = function onInputKeyDown(event) {\n    switch (event.which) {\n      //down\n      case 40:\n        onDownKey(event);\n        break;\n      //up\n\n      case 38:\n        onUpKey(event);\n        break;\n      //space and enter\n\n      case 32:\n      case 13:\n        overlayVisibleState ? hide() : show();\n        event.preventDefault();\n        break;\n      //escape and tab\n\n      case 27:\n      case 9:\n        hide();\n        break;\n\n      default:\n        search(event);\n        break;\n    }\n  };\n\n  var onFilterInputKeyDown = function onFilterInputKeyDown(event) {\n    switch (event.which) {\n      //down\n      case 40:\n        onDownKey(event);\n        break;\n      //up\n\n      case 38:\n        onUpKey(event);\n        break;\n      //enter and escape\n\n      case 13:\n      case 27:\n        hide();\n        event.preventDefault();\n        break;\n    }\n  };\n\n  var onUpKey = function onUpKey(event) {\n    if (visibleOptions) {\n      var prevOption = findPrevOption(getSelectedOptionIndex());\n\n      if (prevOption) {\n        selectItem({\n          originalEvent: event,\n          option: prevOption\n        });\n      }\n    }\n\n    event.preventDefault();\n  };\n\n  var onDownKey = function onDownKey(event) {\n    if (visibleOptions) {\n      if (!overlayVisibleState && event.altKey) {\n        show();\n      } else {\n        var nextOption = findNextOption(getSelectedOptionIndex());\n\n        if (nextOption) {\n          selectItem({\n            originalEvent: event,\n            option: nextOption\n          });\n        }\n      }\n    }\n\n    event.preventDefault();\n  };\n\n  var findNextOption = function findNextOption(index) {\n    if (props.optionGroupLabel) {\n      var groupIndex = index === -1 ? 0 : index.group;\n      var optionIndex = index === -1 ? -1 : index.option;\n      var option = findNextOptionInList(getOptionGroupChildren(visibleOptions[groupIndex]), optionIndex);\n      if (option) return option;else if (groupIndex + 1 !== visibleOptions.length) return findNextOption({\n        group: groupIndex + 1,\n        option: -1\n      });else return null;\n    }\n\n    return findNextOptionInList(visibleOptions, index);\n  };\n\n  var findNextOptionInList = function findNextOptionInList(list, index) {\n    var i = index + 1;\n\n    if (i === list.length) {\n      return null;\n    }\n\n    var option = list[i];\n    return isOptionDisabled(option) ? findNextOptionInList(i) : option;\n  };\n\n  var findPrevOption = function findPrevOption(index) {\n    if (index === -1) {\n      return null;\n    }\n\n    if (props.optionGroupLabel) {\n      var groupIndex = index.group;\n      var optionIndex = index.option;\n      var option = findPrevOptionInList(getOptionGroupChildren(visibleOptions[groupIndex]), optionIndex);\n      if (option) return option;else if (groupIndex > 0) return findPrevOption({\n        group: groupIndex - 1,\n        option: getOptionGroupChildren(visibleOptions[groupIndex - 1]).length\n      });else return null;\n    }\n\n    return findPrevOptionInList(visibleOptions, index);\n  };\n\n  var findPrevOptionInList = function findPrevOptionInList(list, index) {\n    var i = index - 1;\n\n    if (i < 0) {\n      return null;\n    }\n\n    var option = list[i];\n    return isOptionDisabled(option) ? findPrevOption(i) : option;\n  };\n\n  var search = function search(event) {\n    if (searchTimeout.current) {\n      clearTimeout(searchTimeout.current);\n    }\n\n    var _char = event.key;\n\n    if (_char === 'Shift' || _char === 'Control' || _char === 'Alt') {\n      return;\n    }\n\n    if (currentSearchChar.current === _char) searchValue.current = _char;else searchValue.current = searchValue.current ? searchValue.current + _char : _char;\n    currentSearchChar.current = _char;\n\n    if (searchValue.current) {\n      var searchIndex = getSelectedOptionIndex();\n      var newOption = props.optionGroupLabel ? searchOptionInGroup(searchIndex) : searchOption(searchIndex + 1);\n\n      if (newOption) {\n        selectItem({\n          originalEvent: event,\n          option: newOption\n        });\n      }\n    }\n\n    searchTimeout.current = setTimeout(function () {\n      searchValue.current = null;\n    }, 250);\n  };\n\n  var searchOption = function searchOption(index) {\n    if (searchValue.current) {\n      return searchOptionInRange(index, visibleOptions.length) || searchOptionInRange(0, index);\n    }\n\n    return null;\n  };\n\n  var searchOptionInRange = function searchOptionInRange(start, end) {\n    for (var i = start; i < end; i++) {\n      var opt = visibleOptions[i];\n\n      if (matchesSearchValue(opt)) {\n        return opt;\n      }\n    }\n\n    return null;\n  };\n\n  var searchOptionInGroup = function searchOptionInGroup(index) {\n    var searchIndex = index === -1 ? {\n      group: 0,\n      option: -1\n    } : index;\n\n    for (var i = searchIndex.group; i < visibleOptions.length; i++) {\n      var groupOptions = getOptionGroupChildren(visibleOptions[i]);\n\n      for (var j = searchIndex.group === i ? searchIndex.option + 1 : 0; j < groupOptions.length; j++) {\n        if (matchesSearchValue(groupOptions[j])) {\n          return groupOptions[j];\n        }\n      }\n    }\n\n    for (var _i = 0; _i <= searchIndex.group; _i++) {\n      var _groupOptions = getOptionGroupChildren(visibleOptions[_i]);\n\n      for (var _j = 0; _j < (searchIndex.group === _i ? searchIndex.option : _groupOptions.length); _j++) {\n        if (matchesSearchValue(_groupOptions[_j])) {\n          return _groupOptions[_j];\n        }\n      }\n    }\n\n    return null;\n  };\n\n  var matchesSearchValue = function matchesSearchValue(option) {\n    var label = getOptionLabel(option);\n\n    if (!label) {\n      return false;\n    }\n\n    label = label.toLocaleLowerCase(props.filterLocale);\n    return label.startsWith(searchValue.current.toLocaleLowerCase(props.filterLocale));\n  };\n\n  var onEditableInputChange = function onEditableInputChange(event) {\n    if (props.onChange) {\n      props.onChange({\n        originalEvent: event.originalEvent,\n        value: event.target.value,\n        stopPropagation: function stopPropagation() {},\n        preventDefault: function preventDefault() {},\n        target: {\n          name: props.name,\n          id: props.id,\n          value: event.target.value\n        }\n      });\n    }\n  };\n\n  var onEditableInputFocus = function onEditableInputFocus(event) {\n    setFocusedState(true);\n    hide();\n    props.onFocus && props.onFocus(event);\n  };\n\n  var onOptionClick = function onOptionClick(event) {\n    var option = event.option;\n\n    if (!option.disabled) {\n      selectItem(event);\n      DomHandler.focus(focusInputRef.current);\n    }\n\n    hide();\n  };\n\n  var onFilterInputChange = function onFilterInputChange(event) {\n    var filter = event.target.value;\n    setFilterState(filter);\n\n    if (props.onFilter) {\n      props.onFilter({\n        originalEvent: event,\n        filter: filter\n      });\n    }\n  };\n\n  var onFilterClearIconClick = function onFilterClearIconClick(callback) {\n    resetFilter(callback);\n  };\n\n  var resetFilter = function resetFilter(callback) {\n    setFilterState('');\n    props.onFilter && props.onFilter({\n      filter: ''\n    });\n    callback && callback();\n  };\n\n  var clear = function clear(event) {\n    if (props.onChange) {\n      props.onChange({\n        originalEvent: event,\n        value: undefined,\n        stopPropagation: function stopPropagation() {},\n        preventDefault: function preventDefault() {},\n        target: {\n          name: props.name,\n          id: props.id,\n          value: undefined\n        }\n      });\n    }\n\n    updateEditableLabel();\n  };\n\n  var selectItem = function selectItem(event) {\n    if (selectedOption !== event.option) {\n      updateEditableLabel(event.option);\n      var optionValue = getOptionValue(event.option);\n\n      if (props.onChange) {\n        props.onChange({\n          originalEvent: event.originalEvent,\n          value: optionValue,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            name: props.name,\n            id: props.id,\n            value: optionValue\n          }\n        });\n      }\n    }\n  };\n\n  var getSelectedOptionIndex = function getSelectedOptionIndex(options) {\n    options = options || visibleOptions;\n\n    if (props.value != null && options) {\n      if (props.optionGroupLabel) {\n        for (var i = 0; i < options.length; i++) {\n          var selectedOptionIndex = findOptionIndexInList(props.value, getOptionGroupChildren(options[i]));\n\n          if (selectedOptionIndex !== -1) {\n            return {\n              group: i,\n              option: selectedOptionIndex\n            };\n          }\n        }\n      } else {\n        return findOptionIndexInList(props.value, options);\n      }\n    }\n\n    return -1;\n  };\n\n  var equalityKey = function equalityKey() {\n    return props.optionValue ? null : props.dataKey;\n  };\n\n  var findOptionIndexInList = function findOptionIndexInList(value, list) {\n    var key = equalityKey();\n    return list.findIndex(function (item) {\n      return ObjectUtils.equals(value, getOptionValue(item), key);\n    });\n  };\n\n  var isSelected = function isSelected(option) {\n    return ObjectUtils.equals(props.value, getOptionValue(option), equalityKey());\n  };\n\n  var show = function show() {\n    setOverlayVisibleState(true);\n  };\n\n  var hide = function hide() {\n    setOverlayVisibleState(false);\n  };\n\n  var onOverlayEnter = function onOverlayEnter(callback) {\n    ZIndexUtils.set('overlay', overlayRef.current, PrimeReact.autoZIndex, PrimeReact.zIndex['overlay']);\n    alignOverlay();\n    callback && callback();\n  };\n\n  var onOverlayEntered = function onOverlayEntered(callback) {\n    callback && callback();\n    bindOverlayListener();\n    props.onShow && props.onShow();\n  };\n\n  var onOverlayExit = function onOverlayExit() {\n    unbindOverlayListener();\n  };\n\n  var onOverlayExited = function onOverlayExited() {\n    if (props.filter && props.resetFilterOnHide) {\n      resetFilter();\n    }\n\n    ZIndexUtils.clear(overlayRef.current);\n    props.onHide && props.onHide();\n  };\n\n  var alignOverlay = function alignOverlay() {\n    DomHandler.alignOverlay(overlayRef.current, inputRef.current.parentElement, props.appendTo || PrimeReact.appendTo);\n  };\n\n  var scrollInView = function scrollInView() {\n    var highlightItem = DomHandler.findSingle(overlayRef.current, 'li.p-highlight');\n\n    if (highlightItem && highlightItem.scrollIntoView) {\n      highlightItem.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest'\n      });\n    }\n  };\n\n  var updateEditableLabel = function updateEditableLabel(option) {\n    if (inputRef.current) {\n      inputRef.current.value = option ? getOptionLabel(option) : props.value || '';\n    }\n  };\n\n  var getOptionLabel = function getOptionLabel(option) {\n    return props.optionLabel ? ObjectUtils.resolveFieldData(option, props.optionLabel) : option && option['label'] !== undefined ? option['label'] : option;\n  };\n\n  var getOptionValue = function getOptionValue(option) {\n    return props.optionValue ? ObjectUtils.resolveFieldData(option, props.optionValue) : option && option['value'] !== undefined ? option['value'] : option;\n  };\n\n  var getOptionRenderKey = function getOptionRenderKey(option) {\n    return props.dataKey ? ObjectUtils.resolveFieldData(option, props.dataKey) : getOptionLabel(option);\n  };\n\n  var isOptionDisabled = function isOptionDisabled(option) {\n    if (props.optionDisabled) {\n      return ObjectUtils.isFunction(props.optionDisabled) ? props.optionDisabled(option) : ObjectUtils.resolveFieldData(option, props.optionDisabled);\n    }\n\n    return option && option['disabled'] !== undefined ? option['disabled'] : false;\n  };\n\n  var getOptionGroupRenderKey = function getOptionGroupRenderKey(optionGroup) {\n    return ObjectUtils.resolveFieldData(optionGroup, props.optionGroupLabel);\n  };\n\n  var getOptionGroupLabel = function getOptionGroupLabel(optionGroup) {\n    return ObjectUtils.resolveFieldData(optionGroup, props.optionGroupLabel);\n  };\n\n  var getOptionGroupChildren = function getOptionGroupChildren(optionGroup) {\n    return ObjectUtils.resolveFieldData(optionGroup, props.optionGroupChildren);\n  };\n\n  var updateInputField = function updateInputField() {\n    if (props.editable && inputRef.current) {\n      var label = selectedOption ? getOptionLabel(selectedOption) : null;\n      var value = label || props.value || '';\n      inputRef.current.value = value;\n    }\n  };\n\n  var getSelectedOption = function getSelectedOption() {\n    var index = getSelectedOptionIndex(props.options);\n    return index !== -1 ? props.optionGroupLabel ? getOptionGroupChildren(props.options[index.group])[index.option] : props.options[index] : null;\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      show: show,\n      hide: hide,\n      focus: function focus() {\n        return DomHandler.focus(focusInputRef.current);\n      },\n      getElement: function getElement() {\n        return elementRef.current;\n      },\n      getOverlay: function getOverlay() {\n        return overlayRef.current;\n      },\n      getInput: function getInput() {\n        return inputRef.current;\n      },\n      getFocusInput: function getFocusInput() {\n        return focusInputRef.current;\n      }\n    };\n  });\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(inputRef, props.inputRef);\n    ObjectUtils.combinedRefs(focusInputRef, props.focusInputRef);\n  }, [inputRef, props.inputRef, focusInputRef, props.focusInputRef]);\n  useMountEffect(function () {\n    if (props.autoFocus) {\n      DomHandler.focus(focusInputRef.current, props.autoFocus);\n    }\n  });\n  useUpdateEffect(function () {\n    if (overlayVisibleState && props.value) {\n      scrollInView();\n    }\n  }, [overlayVisibleState, props.value]);\n  useUpdateEffect(function () {\n    if (overlayVisibleState && filterState && props.filter) {\n      alignOverlay();\n    }\n  }, [overlayVisibleState, filterState, props.filter]);\n  useUpdateEffect(function () {\n    if (filterState && (!props.options || props.options.length === 0)) {\n      setFilterState('');\n    }\n\n    updateInputField();\n\n    if (inputRef.current) {\n      inputRef.current.selectedIndex = 1;\n    }\n  });\n  useUnmountEffect(function () {\n    ZIndexUtils.clear(overlayRef.current);\n  });\n\n  var createHiddenSelect = function createHiddenSelect() {\n    var option = {\n      value: '',\n      label: props.placeholder\n    };\n\n    if (selectedOption) {\n      var optionValue = getOptionValue(selectedOption);\n      option = {\n        value: _typeof(optionValue) === 'object' ? props.options.findIndex(function (o) {\n          return o === optionValue;\n        }) : optionValue,\n        label: getOptionLabel(selectedOption)\n      };\n    }\n\n    return (\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        className: \"p-hidden-accessible p-dropdown-hidden-select\"\n      },\n      /*#__PURE__*/\n      React.createElement(\"select\", {\n        ref: inputRef,\n        required: props.required,\n        defaultValue: option.value,\n        name: props.name,\n        tabIndex: -1,\n        \"aria-hidden\": \"true\"\n      },\n      /*#__PURE__*/\n      React.createElement(\"option\", {\n        value: option.value\n      }, option.label)))\n    );\n  };\n\n  var createKeyboardHelper = function createKeyboardHelper() {\n    return (\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        className: \"p-hidden-accessible\"\n      },\n      /*#__PURE__*/\n      React.createElement(\"input\", _extends({\n        ref: focusInputRef,\n        id: props.inputId,\n        type: \"text\",\n        readOnly: true,\n        \"aria-haspopup\": \"listbox\",\n        onFocus: onInputFocus,\n        onBlur: onInputBlur,\n        onKeyDown: onInputKeyDown,\n        disabled: props.disabled,\n        tabIndex: props.tabIndex\n      }, ariaProps)))\n    );\n  };\n\n  var createLabel = function createLabel() {\n    var label = ObjectUtils.isNotEmpty(selectedOption) ? getOptionLabel(selectedOption) : null;\n\n    if (props.editable) {\n      var value = label || props.value || '';\n      return (\n        /*#__PURE__*/\n        React.createElement(\"input\", _extends({\n          ref: inputRef,\n          type: \"text\",\n          defaultValue: value,\n          className: \"p-dropdown-label p-inputtext\",\n          disabled: props.disabled,\n          placeholder: props.placeholder,\n          maxLength: props.maxLength,\n          onInput: onEditableInputChange,\n          onFocus: onEditableInputFocus,\n          onBlur: onInputBlur,\n          \"aria-haspopup\": \"listbox\"\n        }, ariaProps))\n      );\n    } else {\n      var _className = classNames('p-dropdown-label p-inputtext', {\n        'p-placeholder': label === null && props.placeholder,\n        'p-dropdown-label-empty': label === null && !props.placeholder\n      });\n\n      var content = props.valueTemplate ? ObjectUtils.getJSXElement(props.valueTemplate, selectedOption, props) : label || props.placeholder || 'empty';\n      return (\n        /*#__PURE__*/\n        React.createElement(\"span\", {\n          ref: inputRef,\n          className: _className\n        }, content)\n      );\n    }\n  };\n\n  var createClearIcon = function createClearIcon() {\n    if (props.value != null && props.showClear && !props.disabled) {\n      var iconClassName = classNames('p-dropdown-clear-icon p-clickable');\n      var iconProps = {\n        className: iconClassName,\n        onPointerUp: clear\n      };\n      return IconUtils.getJSXIcon(props.clearIcon, iconProps);\n    }\n\n    return null;\n  };\n\n  var createDropdownIcon = function createDropdownIcon() {\n    var iconClassName = classNames('p-dropdown-trigger-icon p-clickable');\n    var icon = IconUtils.getJSXIcon(props.dropdownIcon, {\n      className: iconClassName\n    });\n    var ariaLabel = props.placeholder || props.ariaLabel;\n    return (\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        className: \"p-dropdown-trigger\",\n        role: \"button\",\n        \"aria-haspopup\": \"listbox\",\n        \"aria-expanded\": overlayVisibleState,\n        \"aria-label\": ariaLabel\n      }, icon)\n    );\n  };\n\n  var visibleOptions = getVisibleOptions();\n  var selectedOption = getSelectedOption();\n  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip);\n  var otherProps = ObjectUtils.findDiffKeys(props, Dropdown.defaultProps);\n  var ariaProps = ObjectUtils.reduceKeys(otherProps, DomHandler.ARIA_PROPS);\n  var className = classNames('p-dropdown p-component p-inputwrapper', {\n    'p-disabled': props.disabled,\n    'p-focus': focusedState,\n    'p-dropdown-clearable': props.showClear && !props.disabled,\n    'p-inputwrapper-filled': ObjectUtils.isNotEmpty(props.value),\n    'p-inputwrapper-focus': focusedState || overlayVisibleState\n  }, props.className);\n  var hiddenSelect = createHiddenSelect();\n  var keyboardHelper = createKeyboardHelper();\n  var labelElement = createLabel();\n  var dropdownIcon = createDropdownIcon();\n  var clearIcon = createClearIcon();\n  return (\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null,\n    /*#__PURE__*/\n    React.createElement(\"div\", _extends({\n      ref: elementRef,\n      id: props.id,\n      className: className,\n      style: props.style\n    }, otherProps, {\n      onClick: onClick,\n      onMouseDown: props.onMouseDown,\n      onContextMenu: props.onContextMenu\n    }), keyboardHelper, hiddenSelect, labelElement, clearIcon, dropdownIcon,\n    /*#__PURE__*/\n    React.createElement(DropdownPanel, _extends({\n      ref: overlayRef,\n      visibleOptions: visibleOptions\n    }, props, {\n      appendTo: appendTo,\n      onClick: onPanelClick,\n      onOptionClick: onOptionClick,\n      filterValue: filterState,\n      hasFilter: hasFilter,\n      onFilterClearIconClick: onFilterClearIconClick,\n      resetFilter: resetFilter,\n      onFilterInputKeyDown: onFilterInputKeyDown,\n      onFilterInputChange: onFilterInputChange,\n      getOptionLabel: getOptionLabel,\n      getOptionRenderKey: getOptionRenderKey,\n      isOptionDisabled: isOptionDisabled,\n      getOptionGroupChildren: getOptionGroupChildren,\n      getOptionGroupLabel: getOptionGroupLabel,\n      getOptionGroupRenderKey: getOptionGroupRenderKey,\n      isSelected: isSelected,\n      getSelectedOptionIndex: getSelectedOptionIndex,\n      \"in\": overlayVisibleState,\n      onEnter: onOverlayEnter,\n      onEntered: onOverlayEntered,\n      onExit: onOverlayExit,\n      onExited: onOverlayExited\n    }))), hasTooltip &&\n    /*#__PURE__*/\n    React.createElement(Tooltip, _extends({\n      target: elementRef,\n      content: props.tooltip\n    }, props.tooltipOptions)))\n  );\n}));\nDropdown.displayName = 'Dropdown';\nDropdown.defaultProps = {\n  __TYPE: 'Dropdown',\n  appendTo: null,\n  ariaLabel: null,\n  ariaLabelledBy: null,\n  autoFocus: false,\n  className: null,\n  clearIcon: 'pi pi-times',\n  dataKey: null,\n  disabled: false,\n  dropdownIcon: 'pi pi-chevron-down',\n  editable: false,\n  emptyFilterMessage: null,\n  emptyMessage: null,\n  filter: false,\n  filterBy: null,\n  filterInputAutoFocus: true,\n  filterLocale: undefined,\n  filterMatchMode: 'contains',\n  filterPlaceholder: null,\n  filterTemplate: null,\n  focusInputRef: null,\n  id: null,\n  inputId: null,\n  inputRef: null,\n  itemTemplate: null,\n  maxLength: null,\n  name: null,\n  onBlur: null,\n  onChange: null,\n  onContextMenu: null,\n  onFilter: null,\n  onFocus: null,\n  onHide: null,\n  onMouseDown: null,\n  onShow: null,\n  optionDisabled: null,\n  optionGroupChildren: null,\n  optionGroupLabel: null,\n  optionGroupTemplate: null,\n  optionLabel: null,\n  optionValue: null,\n  options: null,\n  panelClassName: null,\n  panelStyle: null,\n  placeholder: null,\n  required: false,\n  resetFilterOnHide: false,\n  scrollHeight: '200px',\n  showClear: false,\n  showFilterClear: false,\n  showOnFocus: false,\n  style: null,\n  tabIndex: null,\n  tooltip: null,\n  tooltipOptions: null,\n  transitionOptions: null,\n  value: null,\n  valueTemplate: null,\n  virtualScrollerOptions: null\n};\nexport { Dropdown };","map":null,"metadata":{},"sourceType":"module"}