{"ast":null,"code":"import * as React from 'react';\nimport { Ripple } from 'primereact/ripple';\nimport { Tooltip } from 'primereact/tooltip';\nimport { ObjectUtils, classNames, IconUtils } from 'primereact/utils';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Button =\n/*#__PURE__*/\nReact.memo(\n/*#__PURE__*/\nReact.forwardRef(function (props, ref) {\n  var elementRef = React.useRef(ref);\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(elementRef, ref);\n  }, [elementRef, ref]);\n\n  if (props.visible === false) {\n    return null;\n  }\n\n  var createIcon = function createIcon() {\n    var icon = props.loading ? props.loadingIcon : props.icon;\n    var className = classNames('p-button-icon p-c', _defineProperty({\n      'p-button-loading-icon': props.loading\n    }, \"p-button-icon-\".concat(props.iconPos), props.label));\n    return IconUtils.getJSXIcon(icon, {\n      className: className\n    }, {\n      props: props\n    });\n  };\n\n  var createLabel = function createLabel() {\n    if (props.label) {\n      return (\n        /*#__PURE__*/\n        React.createElement(\"span\", {\n          className: \"p-button-label p-c\"\n        }, props.label)\n      );\n    }\n\n    return !props.children && !props.label &&\n    /*#__PURE__*/\n    React.createElement(\"span\", {\n      className: \"p-button-label p-c\",\n      dangerouslySetInnerHTML: {\n        __html: '&nbsp;'\n      }\n    });\n  };\n\n  var createBadge = function createBadge() {\n    if (props.badge) {\n      var badgeClassName = classNames('p-badge', props.badgeClassName);\n      return (\n        /*#__PURE__*/\n        React.createElement(\"span\", {\n          className: badgeClassName\n        }, props.badge)\n      );\n    }\n\n    return null;\n  };\n\n  var disabled = props.disabled || props.loading;\n  var showTooltip = !disabled || props.tooltipOptions && props.tooltipOptions.showOnDisabled;\n  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip) && showTooltip;\n  var otherProps = ObjectUtils.findDiffKeys(props, Button.defaultProps);\n  var className = classNames('p-button p-component', props.className, _defineProperty({\n    'p-button-icon-only': (props.icon || props.loading && props.loadingIcon) && !props.label && !props.children,\n    'p-button-vertical': (props.iconPos === 'top' || props.iconPos === 'bottom') && props.label,\n    'p-disabled': disabled,\n    'p-button-loading': props.loading,\n    'p-button-loading-label-only': props.loading && !props.icon && props.label\n  }, \"p-button-loading-\".concat(props.iconPos), props.loading && props.loadingIcon && props.label));\n  var icon = createIcon();\n  var label = createLabel();\n  var badge = createBadge();\n  var defaultAriaLabel = props.label ? props.label + (props.badge ? ' ' + props.badge : '') : props['aria-label'];\n  return (\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null,\n    /*#__PURE__*/\n    React.createElement(\"button\", _extends({\n      ref: elementRef,\n      \"aria-label\": defaultAriaLabel\n    }, otherProps, {\n      className: className,\n      disabled: disabled\n    }), icon, label, props.children, badge,\n    /*#__PURE__*/\n    React.createElement(Ripple, null)), hasTooltip &&\n    /*#__PURE__*/\n    React.createElement(Tooltip, _extends({\n      target: elementRef,\n      content: props.tooltip\n    }, props.tooltipOptions)))\n  );\n}));\nButton.displayName = 'Button';\nButton.defaultProps = {\n  __TYPE: 'Button',\n  label: null,\n  icon: null,\n  iconPos: 'left',\n  badge: null,\n  badgeClassName: null,\n  tooltip: null,\n  tooltipOptions: null,\n  disabled: false,\n  loading: false,\n  loadingIcon: 'pi pi-spinner pi-spin',\n  visible: true\n};\nexport { Button };","map":null,"metadata":{},"sourceType":"module"}