{"ast":null,"code":"import * as React from 'react';\nimport PrimeReact from 'primereact/api';\nimport { useMountEffect, useUpdateEffect, useUnmountEffect } from 'primereact/hooks';\nimport { DomHandler } from 'primereact/utils';\nvar Ripple =\n/*#__PURE__*/\nReact.memo(\n/*#__PURE__*/\nReact.forwardRef(function () {\n  var inkRef = React.useRef(null);\n  var targetRef = React.useRef(null);\n\n  var getTarget = function getTarget() {\n    return inkRef.current && inkRef.current.parentElement;\n  };\n\n  var bindEvents = function bindEvents() {\n    if (targetRef.current) {\n      targetRef.current.addEventListener('mousedown', onMouseDown);\n      DomHandler.isTouchDevice() && targetRef.current.addEventListener('touchstart', onTouchStart);\n    }\n  };\n\n  var unbindEvents = function unbindEvents() {\n    if (targetRef.current) {\n      targetRef.current.removeEventListener('mousedown', onMouseDown);\n      DomHandler.isTouchDevice() && targetRef.current.removeEventListener('touchstart', onTouchStart);\n    }\n  };\n\n  var onTouchStart = function onTouchStart(event) {\n    var offset = DomHandler.getOffset(targetRef.current);\n    var offsetX = event.targetTouches[0].pageX - offset.left + document.body.scrollTop - DomHandler.getWidth(inkRef.current) / 2;\n    var offsetY = event.targetTouches[0].pageY - offset.top + document.body.scrollLeft - DomHandler.getHeight(inkRef.current) / 2;\n    activateRipple(offsetX, offsetY);\n  };\n\n  var onMouseDown = function onMouseDown(event) {\n    if (DomHandler.isTouchDevice()) {\n      // already started ripple with onTouchStart\n      return;\n    }\n\n    var offset = DomHandler.getOffset(targetRef.current);\n    var offsetX = event.pageX - offset.left + document.body.scrollTop - DomHandler.getWidth(inkRef.current) / 2;\n    var offsetY = event.pageY - offset.top + document.body.scrollLeft - DomHandler.getHeight(inkRef.current) / 2;\n    activateRipple(offsetX, offsetY);\n  };\n\n  var activateRipple = function activateRipple(offsetX, offsetY) {\n    if (!inkRef.current || getComputedStyle(inkRef.current, null).display === 'none') {\n      return;\n    }\n\n    DomHandler.removeClass(inkRef.current, 'p-ink-active');\n\n    if (!DomHandler.getHeight(inkRef.current) && !DomHandler.getWidth(inkRef.current)) {\n      var d = Math.max(DomHandler.getOuterWidth(targetRef.current), DomHandler.getOuterHeight(targetRef.current));\n      inkRef.current.style.height = d + 'px';\n      inkRef.current.style.width = d + 'px';\n    }\n\n    inkRef.current.style.top = offsetY + 'px';\n    inkRef.current.style.left = offsetX + 'px';\n    DomHandler.addClass(inkRef.current, 'p-ink-active');\n  };\n\n  var onAnimationEnd = function onAnimationEnd(event) {\n    DomHandler.removeClass(event.currentTarget, 'p-ink-active');\n  };\n\n  useMountEffect(function () {\n    if (inkRef.current) {\n      targetRef.current = getTarget();\n      bindEvents();\n    }\n  });\n  useUpdateEffect(function () {\n    if (inkRef.current && !targetRef.current) {\n      targetRef.current = getTarget();\n      bindEvents();\n    }\n  });\n  useUnmountEffect(function () {\n    if (inkRef.current) {\n      targetRef.current = null;\n      unbindEvents();\n    }\n  });\n  return PrimeReact.ripple ?\n  /*#__PURE__*/\n  React.createElement(\"span\", {\n    role: \"presentation\",\n    ref: inkRef,\n    className: \"p-ink\",\n    onAnimationEnd: onAnimationEnd\n  }) : null;\n}));\nRipple.displayName = 'Ripple';\nexport { Ripple };","map":null,"metadata":{},"sourceType":"module"}